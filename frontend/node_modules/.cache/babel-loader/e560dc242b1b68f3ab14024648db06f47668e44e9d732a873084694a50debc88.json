{"ast":null,"code":"import axios from 'axios';\n\n// Get API base URL from environment or use default\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000/api';\n\n// Create axios instance for API requests\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n/**\r\n * Send voice query to the backend\r\n * \r\n * @param {Blob} audioBlob - The recorded audio as a Blob\r\n * @param {Array} conversationHistory - Previous conversation messages\r\n * @returns {Promise} - Response with transcript, text and audio response\r\n */\nexport const sendVoiceQuery = async (audioBlob, conversationHistory = []) => {\n  try {\n    // Create form data to send audio file\n    const formData = new FormData();\n    formData.append('audio', audioBlob, 'recording.wav');\n    formData.append('user_id', localStorage.getItem('user_id') || 'anonymous');\n    formData.append('conversation_history', JSON.stringify(conversationHistory));\n\n    // Send request to backend\n    const response = await axios.post(`${API_BASE_URL}/voice`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('API Error (Voice Query):', error);\n    throw error;\n  }\n};\n\n/**\r\n * Fetch all products\r\n * \r\n * @param {string} category - Optional category filter\r\n * @param {string} search - Optional search term\r\n * @returns {Promise} - Response with product data\r\n */\nexport const fetchProducts = async (category = null, search = null) => {\n  try {\n    // Build query parameters\n    const params = {};\n    if (category) params.category = category;\n    if (search) params.search = search;\n\n    // Send request to backend\n    const response = await apiClient.get('/products', {\n      params\n    });\n    return response.data;\n  } catch (error) {\n    console.error('API Error (Fetch Products):', error);\n    throw error;\n  }\n};\n\n/**\r\n * Fetch a single product by ID\r\n * \r\n * @param {string} productId - The product ID\r\n * @returns {Promise} - Response with product data\r\n */\nexport const fetchProduct = async productId => {\n  try {\n    const response = await apiClient.get(`/products/${productId}`);\n    return response.data;\n  } catch (error) {\n    console.error('API Error (Fetch Product):', error);\n    throw error;\n  }\n};\n\n/**\r\n * Fetch order status\r\n * \r\n * @param {string} orderId - The order ID\r\n * @returns {Promise} - Response with order status data\r\n */\nexport const fetchOrderStatus = async orderId => {\n  try {\n    const response = await apiClient.get(`/orders/${orderId}`);\n    return response.data;\n  } catch (error) {\n    console.error('API Error (Fetch Order Status):', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","apiClient","create","baseURL","headers","sendVoiceQuery","audioBlob","conversationHistory","formData","FormData","append","localStorage","getItem","JSON","stringify","response","post","data","error","console","fetchProducts","category","search","params","get","fetchProduct","productId","fetchOrderStatus","orderId"],"sources":["D:/csvoicev2/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Get API base URL from environment or use default\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000/api';\r\n\r\n// Create axios instance for API requests\r\nconst apiClient = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n/**\r\n * Send voice query to the backend\r\n * \r\n * @param {Blob} audioBlob - The recorded audio as a Blob\r\n * @param {Array} conversationHistory - Previous conversation messages\r\n * @returns {Promise} - Response with transcript, text and audio response\r\n */\r\nexport const sendVoiceQuery = async (audioBlob, conversationHistory = []) => {\r\n  try {\r\n    // Create form data to send audio file\r\n    const formData = new FormData();\r\n    formData.append('audio', audioBlob, 'recording.wav');\r\n    formData.append('user_id', localStorage.getItem('user_id') || 'anonymous');\r\n    formData.append('conversation_history', JSON.stringify(conversationHistory));\r\n    \r\n    // Send request to backend\r\n    const response = await axios.post(`${API_BASE_URL}/voice`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('API Error (Voice Query):', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Fetch all products\r\n * \r\n * @param {string} category - Optional category filter\r\n * @param {string} search - Optional search term\r\n * @returns {Promise} - Response with product data\r\n */\r\nexport const fetchProducts = async (category = null, search = null) => {\r\n  try {\r\n    // Build query parameters\r\n    const params = {};\r\n    if (category) params.category = category;\r\n    if (search) params.search = search;\r\n    \r\n    // Send request to backend\r\n    const response = await apiClient.get('/products', { params });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('API Error (Fetch Products):', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Fetch a single product by ID\r\n * \r\n * @param {string} productId - The product ID\r\n * @returns {Promise} - Response with product data\r\n */\r\nexport const fetchProduct = async (productId) => {\r\n  try {\r\n    const response = await apiClient.get(`/products/${productId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('API Error (Fetch Product):', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Fetch order status\r\n * \r\n * @param {string} orderId - The order ID\r\n * @returns {Promise} - Response with order status data\r\n */\r\nexport const fetchOrderStatus = async (orderId) => {\r\n  try {\r\n    const response = await apiClient.get(`/orders/${orderId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('API Error (Fetch Order Status):', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAI,2BAA2B;;AAEtF;AACA,MAAMC,SAAS,GAAGL,KAAK,CAACM,MAAM,CAAC;EAC7BC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAOC,SAAS,EAAEC,mBAAmB,GAAG,EAAE,KAAK;EAC3E,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEJ,SAAS,EAAE,eAAe,CAAC;IACpDE,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAEC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,IAAI,WAAW,CAAC;IAC1EJ,QAAQ,CAACE,MAAM,CAAC,sBAAsB,EAAEG,IAAI,CAACC,SAAS,CAACP,mBAAmB,CAAC,CAAC;;IAE5E;IACA,MAAMQ,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,IAAI,CAAC,GAAGnB,YAAY,QAAQ,EAAEW,QAAQ,EAAE;MACnEJ,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,OAAOW,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,aAAa,GAAG,MAAAA,CAAOC,QAAQ,GAAG,IAAI,EAAEC,MAAM,GAAG,IAAI,KAAK;EACrE,IAAI;IACF;IACA,MAAMC,MAAM,GAAG,CAAC,CAAC;IACjB,IAAIF,QAAQ,EAAEE,MAAM,CAACF,QAAQ,GAAGA,QAAQ;IACxC,IAAIC,MAAM,EAAEC,MAAM,CAACD,MAAM,GAAGA,MAAM;;IAElC;IACA,MAAMP,QAAQ,GAAG,MAAMd,SAAS,CAACuB,GAAG,CAAC,WAAW,EAAE;MAAED;IAAO,CAAC,CAAC;IAC7D,OAAOR,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,YAAY,GAAG,MAAOC,SAAS,IAAK;EAC/C,IAAI;IACF,MAAMX,QAAQ,GAAG,MAAMd,SAAS,CAACuB,GAAG,CAAC,aAAaE,SAAS,EAAE,CAAC;IAC9D,OAAOX,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMS,gBAAgB,GAAG,MAAOC,OAAO,IAAK;EACjD,IAAI;IACF,MAAMb,QAAQ,GAAG,MAAMd,SAAS,CAACuB,GAAG,CAAC,WAAWI,OAAO,EAAE,CAAC;IAC1D,OAAOb,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}